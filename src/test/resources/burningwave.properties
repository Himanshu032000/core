#paths.main-class-paths.extension=//${system.properties:java.home}/lib//children:.*\\.jar|.*\\.jmod;//${system.properties:java.home}/jmods//children:.*\\.jar|.*\\.jmod;
#paths.class-factory.java-memory-compiler.class-repositories=${classPaths};${paths.main-class-paths.extension};${classPaths}/../../src/test/external-resources/libs-for-test.zip;
#paths.class-factory.default-class-loader.class-repositories=${paths.class-factory.java-memory-compiler.class-repositories};
class-factory.default-class-loader=Thread.currentThread().getContextClassLoader()
class-hunter.path-scanner-class-loader.parent=Thread.currentThread().getContextClassLoader()
#class-hunter.path-scanner-class-loader.parent.imports=org.burningwave.core.iterable.IterableObjectHelper;
#java-memory-compiler.class-path-hunter.search-config.check-file-options=checkFileName|checkFileSignature
#class-hunter.path-scanner-class-loader.byte-code-hunter.search-config.check-file-options=checkFileName|checkFileSignature
#class-factory.byte-code-hunter.search-config.check-file-options=checkFileName|checkFileSignature
paths.custom-class-path=${classPaths}/../../src/test/external-resources/libs-for-test.zip;
code-block-1=\
	${code-block-2}\
	return (T)Date.from(zonedDateTime.toInstant());
code-block-1.imports=\
	${code-block-2.imports}\
	java.util.Date;
code-block-2=\
	LocalDateTime localDateTime = (LocalDateTime)parameter[0];\
	ZonedDateTime zonedDateTime = localDateTime.atZone(ZoneId.systemDefault());
code-block-2.imports=\
	static org.burningwave.core.assembler.StaticComponentContainer.Strings;\
	java.time.LocalDateTime;\
	java.time.ZonedDateTime;\
	java.time.ZoneId;
