/*
 * This file is part of Burningwave Core.
 *
 * Author: Roberto Gentli
 *
 * Hosted at: https://github.com/burningwave/core
 *
 * --
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Roberto Gentili
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without
 * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
 * EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
 * OR OTHER DEALINGS IN THE SOFTWARE.
 */
package ${packageName};


import java.lang.invoke.MethodHandles;
import java.util.function.Function;
import java.util.Objects;
${imports}


@FunctionalInterface
public interface ${className}<${generics_01}> extends Virtual {

    ${returnGenericType_01} apply(${genericParams_01});

    default <${returnGenericType_02}> ${className}<${generics_02}> andThen(Function<? super ${returnGenericType_01}, ? extends ${returnGenericType_02}> after) {
    	Objects.requireNonNull(after);
    	return (${genericParams_01}) -> after.apply(apply(${params_01}));
    }

    static MethodHandles.Lookup ${callerRetrieverMethodName}() {
    	return MethodHandles.lookup();
    }

}